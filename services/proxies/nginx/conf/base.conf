log_format lab '$remote_addr - $remote_user [$time_local] "$request" '
                'status=$status uri="$uri" req_uri="$request_uri" args="$args" loc="$loc" '
                'host="$host" ref="$http_referer" ua="$http_user_agent" xff="$http_x_forwarded_for"';

server {
    listen 80;
    underscores_in_headers on;  # allow incoming headers with underscores (e.g., SCRIPT_NAME)
    ignore_invalid_headers off; # do not drop such headers when proxying to upstream
    access_log /var/log/nginx/access.log lab;
    # default location alias (overridden per location)
    set $loc "server";

    # Resolve container hostnames at request time via Docker DNS
    resolver 127.0.0.11 ipv6=off;
    # Backend host variables
    set $py_host backend-python;
    set $php_host backend-php;

    # Vulnerable demo for PHP backend under /php/split...
    # Regex: /php/split/((?<action>[^.]*)\.json)?$
    # Note: regex location cannot use proxy_pass with a URI. Rewrite first.
    location ~ ^/php/split/((?<action>[^.]*)\.json)?$ {
        set $loc "php-split";
        # Intentionally unsafe reflection into headers (demo only)
        add_header X-Action $action always;
        add_header X-Next $arg_next always;

        # Strip "/php/split/..." and keep only <action>
        rewrite ^/php/split/.*$ /public/$action break;
        proxy_set_header X-Action $action;
        proxy_set_header X-Next $arg_next;
        
        # Strip "/php" prefix so upstream sees "/split/..."
        # rewrite ^/php/(.*)$ /$1 break;
        proxy_pass http://$php_host:80;

        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-NGX-Request-URI $request_uri;
        proxy_set_header X-NGX-URI $uri;
        proxy_set_header X-NGX-Args $args;
        proxy_set_header Connection '';
        proxy_buffering off;
        proxy_request_buffering on;
        client_max_body_size 50m;
    }

    # Vulnerable demo: reflects path capture and query param into headers
    # Regex: /py/split/((?<action>[^.]*)\.json)?$
    # Note: In regex locations proxy_pass MUST NOT contain a URI part.
    location ~ ^/py/split/((?<action>[^.]*)\.json)?$ {
        set $loc "split";
        # DANGEROUS: reflecting untrusted input into response and upstream headers
        add_header X-Action $action always;
        add_header X-Next $arg_next always;

        proxy_set_header X-Action $action;
        proxy_set_header X-Next $arg_next;

        # Rewrite to /public/<rest> then pass upstream without URI part
        rewrite ^/py/split/(.*)$ /public/$1 break;
        proxy_pass http://$py_host:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-NGX-Request-URI $request_uri;
        proxy_set_header X-NGX-URI $uri;
        proxy_set_header X-NGX-Args $args;
        proxy_set_header Connection '';
        proxy_buffering off;
        proxy_request_buffering on;
        client_max_body_size 50m;
    }

    # Demo locations to show proxy_pass behavior
    # 1) Without trailing slash in proxy_pass: forwards /py1/... unchanged to upstream
    location /py1 {
        set $loc "py1";
        proxy_pass http://$py_host:8000/public;  # no trailing slash: upstream path becomes /public/py1/...
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-NGX-Request-URI $request_uri;
        proxy_set_header X-NGX-URI $uri;
        proxy_set_header X-NGX-Args $args;
        proxy_set_header Connection '';
        proxy_buffering off;
        proxy_request_buffering on;
        client_max_body_size 50m;
    }

    # 2) With trailing slash in proxy_pass: strips /py2/ prefix and forwards the remainder
    location /py2/ {
        set $loc "py2";
        proxy_pass http://$py_host:8000/public/;  # trailing slash: drop /py2 prefix, upstream path /public/<rest>
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-NGX-Request-URI $request_uri;
        proxy_set_header X-NGX-URI $uri;
        proxy_set_header X-NGX-Args $args;
        proxy_set_header Connection '';
        proxy_buffering off;
        proxy_request_buffering on;
        client_max_body_size 50m;
    }

    # Demo: SCRIPT_NAME header bypass inspired by gunicorn#2650
    location /py_underscore_headers {
        set $loc "py_underscore_headers";
        rewrite ^/py_underscore_headers/?(.*)$ /$1 break;
        proxy_pass http://$py_host:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-NGX-Request-URI $request_uri;
        proxy_set_header X-NGX-URI $uri;
        proxy_set_header X-NGX-Args $args;
        proxy_set_header Connection '';
        proxy_buffering off;
        proxy_request_buffering on;
        client_max_body_size 50m;
    }

    # Guard: deny direct access to /internal, but SCRIPT_NAME can bypass
    location ^~ /py_underscore_headers/internal/ {
        set $loc "py_underscore_deny";
        return 403;
    }

    # Proxy defaults aiming to be transparent-ish
    location / {
        set $loc "root";
        proxy_pass http://$py_host:8000/public/;  # default: forward everything to /public
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        # Expose Nginx view of URI variables to backend
        proxy_set_header X-NGX-Request-URI $request_uri;
        proxy_set_header X-NGX-URI $uri;
        proxy_set_header X-NGX-Args $args;
        proxy_set_header Connection '';
        proxy_buffering off;
        proxy_request_buffering on;
        client_max_body_size 50m;
    }

    location /php/ {
        set $loc "php";
        proxy_pass http://$php_host:80/public/;  # default: forward to PHP public controller
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-NGX-Request-URI $request_uri;
        proxy_set_header X-NGX-URI $uri;
        proxy_set_header X-NGX-Args $args;
        proxy_set_header Connection '';
        proxy_buffering off;
        proxy_request_buffering on;
        client_max_body_size 50m;
    }
}
